plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id "io.freefair.lombok" version "5.3.0"
    id "com.github.hierynomus.license" version "0.15.0"
}

jacoco {
    // Use JaCoCo 0.8.6 for (experimental) support for Java 15 class files.
    toolVersion = "0.8.6"
}

group = 'com.dumbdogdiner'

version = '2.0.0'

// License Plugin Options
license { header = file('LICENSE_HEADER') }
// Run the license formatter before compiling the source code.
tasks.compileJava.dependsOn licenseFormatMain, licenseFormatTest

configurations {
    jaxDoclet
    // give test dependencies access to compileOnly dependencies to emulate providedCompile
    testImplementation.extendsFrom compileOnly
}


repositories {
    mavenCentral()
    jcenter()
    google()


    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }

    maven { url = "https://jitpack.io" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }

    maven { url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }

    // FULL paper/spigot/bukkit/craftbukkit
    maven {
        credentials {
            username "$ghUser"
            password "$ghPass"
        }
        url = "https://maven.pkg.github.com/DumbDogDiner/buildtoolspackages/" }

    maven {
        credentials {
            username "$ghUser"
            password "$ghPass"
        }
        url = "https://maven.pkg.github.com/DumbDogDiner/mojangapi/" }

}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'


    implementation 'com.atlassian.commonmark:commonmark:0.15.2'
    compileOnly 'io.github.waterfallmc:waterfall-api:1.16-R0.4-SNAPSHOT'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.github.classgraph:classgraph:4.8.90'
    implementation 'com.github.seancfoley:ipaddress:5.3.3'
    compileOnly 'com.dumbdogdiner.buildtools:paper:1.16.4-288-SNAPSHOT'

    // PAPI
    compileOnly "me.clip:placeholderapi:2.10.6"

    // Luckperms
    compileOnly 'net.luckperms:api:5.2'

    // Vault
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"

    // Apache HTTP Client
    implementation 'org.apache.httpcomponents:httpclient:4.5'

    // JUnit 5 Testing
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")

    // Mocking
    testImplementation("org.powermock:powermock-module-junit4:2.0.9")
    testImplementation("org.powermock:powermock-api-mockito2:2.0.9")
    testImplementation("org.powermock:powermock-module-junit4-rule:2.0.9")
    testImplementation("org.powermock:powermock-classloading-xstream:2.0.9")
    testImplementation("org.mockito:mockito-core:3.6.0")
}

javadoc {
    options.tags(["apiNote", "attr"])
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.enabled true
    }
}

task sources(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}


tasks.publish.dependsOn build, sources


tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-XDignore.symbol.file"
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DumbDogDiner/StickyAPI")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            artifact sources // Publish the output of the sources task
        }
    }
}
